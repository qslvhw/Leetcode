Write an algorithm to determine if a number is "happy".
A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Example: 19 is a happy number
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1


// if it is not a happy number, the number will be repeated, using hashset to check if it is repeated.
class Solution {
    public boolean isHappy(int n) {
        if (n<=0) return false;
        Set<Integer> set = new HashSet<>();
        while (n!=1) {
            if (set.contains(n)) return false;
            set.add(n);
            n = nextNum(n);
        }
        return true;
    }
    public int nextNum(int n) {
        int sum=0;
        while (n>0) {
            sum += (n%10) * (n%10);
            n /= 10;
        }
        return sum;
    }
}

// when n=1 or n=7, the number is happy number.
class Solution {
    public boolean isHappy(int n) {
        if (n<=0) return false;
        while (n>=10) {
            int sum = 0;
            while (n > 0) {
                sum += (n%10) * (n%10);
                n = n/10;
            }
            n = sum;
        }
        return (n==1 || n==7);
    }
}
