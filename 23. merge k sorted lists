/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
 // binary search from 0 ~ lists.length-1. merge two lists for each operation.
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists==null || lists.length==0) return null;
        return merge(lists, 0, lists.length-1);
    }
    public ListNode merge(ListNode[] lists, int low, int high) {
        if (low<high) {
            int mid = low+(high-low)/2;
            ListNode left = merge(lists, low, mid);
            ListNode right = merge(lists, mid+1, high);
            return mergeTwo(left, right);
        }
        return lists[low];
    }
    public ListNode mergeTwo(ListNode l1, ListNode l2) {
        if (l1==null) return l2;
        if (l2==null) return l1;
        
        ListNode l3 = new ListNode(0);
        
        // determine l3 start with the head from l1 or l2
        if (l1.val<l2.val) {
            l3 = l1;
            l1 = l1.next;
        } else {
            l3 = l2;
            l2 = l2.next;
        }
        // dummy head to record l3
        ListNode dummy = new ListNode(0);
        dummy.next = l3;
        while (l1!=null && l2!=null) {
            if (l1.val<l2.val) {
                l3.next = l1;
                l1 = l1.next;
                l3 = l3.next;
            } else {
                l3.next = l2;
                l2 = l2.next;
                l3 = l3.next;
            }
        }
        // if one list remains element, then add it to l3.
        if (l1!=null) {
            l3.next = l1;
        }
        if (l2!=null) {
            l3.next = l2;
        }
        return dummy.next;
    }
}

// use priorityqueue, comparator. the listnode in queue is based on the value. each time poll and offer for the next node
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists==null || lists.length==0) return null;
        
        PriorityQueue<ListNode> q = new PriorityQueue<>(new Comparator<ListNode>(){
            @Override
            public int compare(ListNode l1, ListNode l2) {
                return l1.val-l2.val;
            }
        });
        
        ListNode head = new ListNode(0);
        ListNode dummy = head;
        
        for (ListNode list : lists) {
            if (list!=null) q.offer(list);
        }
        
        while (!q.isEmpty()) {
            ListNode node = q.poll();
            dummy.next = node;
            dummy = dummy.next;
            if (node.next!=null) {
                q.offer(node.next);
            }
        }
        return head.next;
    }
}
