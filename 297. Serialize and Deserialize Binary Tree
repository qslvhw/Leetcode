Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file 
or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.
Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization 
algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized 
to the original tree structure.

For example, you may serialize the following tree

    1
   / \
  2   3
     / \
    4   5
as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format,
so please be creative and come up with different approaches yourself.
Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

// dfs, using deque in deserialize helper function
public class Codec {
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder tree = new StringBuilder();
        serHelp(root, tree);
        return tree.toString();
    }
    public void serHelp(TreeNode root, StringBuilder tree) {
        if (root == null) {
            tree.append("null ");
            return;
        }
        tree.append(String.valueOf(root.val)).append(' ');
        serHelp(root.left, tree);
        serHelp(root.right, tree);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String[] tree = data.split(" ");
        Deque<String> q = new LinkedList<>();
        q.addAll(Arrays.asList(tree));
        return deHelp(q);
    }
    public TreeNode deHelp(Deque, tree) {
        String val = tree.remove();
        if (val.equals("null")) return null;
        TreeNode node = new TreeNode(Integer.valueOf(val));
        node.left = deHelp(tree);
        node.right = deHelp(tree);
    }   
}


// bfs
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if (root==null) return "";
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        StringBuilder tree = new StringBuilder();
        
        while (!q.isEmpty()) {
            int len = q.size();
            TreeNode node = q.poll();
            if (node==null) {
                tree.append("null ");
            } else {
                tree.append(node.val + " ");
                q.add(node.left);
                q.add(node.right);
            }
        }
        return tree.toString();
    }
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data=="") return null;
        String[] tree = data.split(" ");
        TreeNode root = new TreeNode(Integer.valueOf(tree[0]));
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        
        for (int i=1; i<tree.length; i++) {
            TreeNode node = q.poll();
            if (!tree[i].equals("null")) {
                TreeNode left = new TreeNode(Integer.parseInt(tree[i]));
                node.left = left;
                q.add(left);
            }
            i++;
            if (!tree[i].equals("null")) {
                TreeNode right = new TreeNode(Integer.parseInt(tree[i]));
                node.right = right;
                q.add(right);
            }
        }
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
