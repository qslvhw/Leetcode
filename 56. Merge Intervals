Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].



/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> ans = new ArrayList<>();
        if (intervals==null || intervals.size()==0) return ans;
        
        Collections.sort(intervals, new Comparator<Interval>() {
            @Override
            public int compare(Interval i1, Interval i2) {
                if (i1.start!=i2.start) {
                    return i1.start-i2.start;
                } else {
                    return i1.end-i2.end;
                }
            }
        });
        
        Interval pre = intervals.get(0);
        for (int i=1; i<intervals.size(); i++) {
            Interval cur = intervals.get(i);
            if (cur.start<=pre.end) {
                Interval merge = new Interval(pre.start, Math.max(cur.end, pre.end));
                pre = merge;
            } else {
                ans.add(pre);
                pre = cur;
            }
        }
        ans.add(pre);
        return ans;
    }
}
