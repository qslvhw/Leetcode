Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. 
A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree 
of itself.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 // determine if the subtree of s is the same as t.
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
        if (s==null) return false;
        if (isSame(s,t)) return true;
        return isSubtree(s.left, t) || isSubtree(s.right, t);
    }
    public boolean isSame(TreeNode t1, TreeNode t2) {
        if (t1==null && t2==null) return true;
        if (t1==null || t2==null) return false;
        return t1.val==t2.val && isSame(t1.left, t2.left) && isSame(t1.right, t2.right);
    }
}
