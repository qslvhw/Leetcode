Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2.
Note:

The length of both num1 and num2 is < 110.
Both num1 and num2 contains only digits 0-9.
Both num1 and num2 does not contain any leading zero.
You must not use any built-in BigInteger library or convert the inputs to integer directly.


public class Solution {
    public static String multiply(String num1, String num2) {
        StringBuilder s = new StringBuilder();
        num1 = new StringBuilder(num1).reverse().toString();
        num2 = new StringBuilder(num2).reverse().toString();
        int[] mul = new int[num1.length()+num2.length()];
        
        for (int i=0; i<num1.length(); i++) {
            int c1 = num1.charAt(i)-'0';
            for (int j=0; j<num2.length(); j++) {
                int c2= num2.charAt(j)-'0';
                mul[i+j] += c1*c2;
            }
        }
        
        for (int i=0; i<mul.length; i++) {
            int digit = mul[i]%10;
            int carry = mul[i]/10;
            s.append(digit);
            if (i<mul.length-1) {
                mul[i+1] += carry;
            }
        }
        
        s.reverse();
        while (s.length()>0 && s.charAt(0)=='0') {
            s.deleteCharAt(0);
        }
        
        
        return s.length()==0 ? "0" : s.toString();
    }
}


