Given n, how many structurally unique BST's (binary search trees) that store values 1...n?

For example,
Given n = 3, there are a total of 5 unique BST's.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

 /*
        cnt[0] = 1              tree is empty
        
        cnt[1] = 1              has one tree
        
        cnt[2] = cnt[0]*cnt[1]  1 as root
                +cnt[1]*cnt[0]  2 as root
                
        cnt[3] = cnt[0]*cnt[2]  1 as root
                +cnt[1]*cnt[1]  2 as root
                +cnt[2]*cnt[0]  3 as root
        ...
        
        cnt[n] = cnt[0]*cnt[n-1] + cnt[1]*cnt[n-2] + ... + cnt[n-1]*cnt[0]
        cnt[num] = cnt[num] + cnt[j] * cnt[num-j-1]
        
*/
        


public class Solution {
    public int numTrees(int n) {
        int[] cnt = new int[n+1];
        cnt[0]=1;
        cnt[1]=1;
        for (int i=2; i<=n; i++) {
            for (int j=0; j<=i-1; j++) {
                cnt[i] += cnt[j] * cnt[i-j-1];
            }
        }
        return cnt[n];
    }
}
