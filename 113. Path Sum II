Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 // same as 112
 
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        helper(ans, list, root, sum);
        return ans;
    }
    public void helper(List<List<Integer>> ans, List<Integer> list, TreeNode root, int sum) {
        if (root==null) return;
        
        list.add(root.val);
        if (root.val==sum && root.left==null && root.right==null) {
            ans.add(new ArrayList<>(list));
        }
        helper(ans, list, root.left, sum-root.val);
        helper(ans, list, root.right, sum-root.val);
        list.remove(list.size()-1);
    }
}
