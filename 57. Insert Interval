Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).
You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].
Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].
This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].


/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        int newStart = newInterval.start;
        int newEnd = newInterval.end;
        List<Interval> list = new ArrayList<>();
        if (intervals==null) list.add(newInterval);
        
        for (int i=0; i<intervals.size(); i++) {
            Interval inter = intervals.get(i);
            if (newInterval==null || inter.end<newInterval.start) {
                list.add(inter);
            } else if (newInterval.end<inter.start) {
                list.add(newInterval);
                list.add(inter);
                newInterval=null;
            } else {
                newInterval.end = Math.max(newInterval.end, inter.end);
                newInterval.start = Math.min(newInterval.start, inter.start);
            }
        }
        if (newInterval!=null) {
            list.add(newInterval);
        }
        return list;
    }
}

// faster, idea is the same
class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        List<Interval> ans = new ArrayList<>();
        
        for (Interval i : intervals) {
            if (i.end<newInterval.start) {
                ans.add(i);
            } else if (i.start>newInterval.end) {
                ans.add(newInterval);
                newInterval = i;
            } else {
                newInterval = new Interval(Math.min(newInterval.start, i.start), Math.max(newInterval.end, i.end));
            }
        }
        ans.add(newInterval);
        return ans;
    }
}
