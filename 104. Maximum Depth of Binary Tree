Given a binary tree, find its maximum depth.
The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 // dfs solution
public class Solution {
    public int maxDepth(TreeNode root) {
        if (root==null) return 0;
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
        return Math.max(left, right)+1;
    }
}

// interative solution
public class Solution {
    public int maxDepth(TreeNode root) {
        if (root==null) return 0;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        int cur=1, next=0, h=0;
        while (!q.isEmpty()) {
            TreeNode n = q.poll();
            cur--;
            if (n.left!=null) {
                q.add(n.left); 
                next++;
            }
            if (n.right!=null) {
                q.add(n.right); 
                next++;
            }
            if (cur==0) {
                cur = next;
                next = 0;
                h++;
            }
        }
        return h;
    }
}
