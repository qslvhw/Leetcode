Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<TreeNode> generateTrees(int n) {
        if (n==0) {
            return new ArrayList<TreeNode>();
        }
        return helper(1, n);
    }
    public List<TreeNode> helper(int i, int j) {
        List<TreeNode> ans = new ArrayList<>();
        if (i>j) {
            ans.add(null);
            return ans;
        }
        for (int k=i; k<=j; k++) {
            List<TreeNode> lefts = helper(i, k-1);       // left leaves are made from (i, k-1)
            List<TreeNode> rights = helper(k+1, j);      // right leaves are made from (k+1, i), node is TreeNode(k)
            for (TreeNode left : lefts) {
                for (TreeNode right : rights) {
                    TreeNode node = new TreeNode(k);
                    node.left = left;
                    node.right = right;
                    ans.add(node);
                }
            }
        }
        return ans;
    }
}
