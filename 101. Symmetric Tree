Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
For example, this binary tree [1,2,2,3,4,4,3] is symmetric:
    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following [1,2,2,null,3,null,3] is not:
    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 // recursive solution
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root==null) return true;
        return isSame(root.left, root.right);
    }
    public boolean isSame(TreeNode p, TreeNode q) {
        if (p==null && q==null) return true;
        if (p==null || q==null) return false;
        if (p.val==q.val) {
            return isSame(p.left, q.right) && isSame(p.right, q.left);
        } else {
            return false;
        }
    }
}

// iterative solution
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        Queue<TreeNode> q1 = new LinkedList<>();
        Queue<TreeNode> q2 = new LinkedList<>();
        if (root==null) return true;
        if (root.left==null && root.right==null) return true;
        if (root.left==null || root.right==null) return false;
        
        q1.add(root.left);
        q2.add(root.right);
        while (!q1.isEmpty() && !q2.isEmpty()) {
            TreeNode n1 = q1.poll();
            TreeNode n2 = q2.poll();
            if (n1.val!=n2.val) return false;
            if ((n1.left==null && n2.right!=null) || (n1.left!=null && n2.right==null) ||
               (n1.right==null && n2.left!=null) || (n1.right!=null && n2.left==null)) return false;
            
            if (n1.left!=null && n2.right!=null) {
                q1.add(n1.left);
                q2.add(n2.right);
            }
            if (n1.right!=null && n2.left!=null) {
                q1.add(n1.right);
                q2.add(n2.left);
            }
        }
        return true;
    }
}
