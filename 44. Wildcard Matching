Implement wildcard pattern matching with support for '?' and '*'.
'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).
The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "c*a*b") → false

// mark p and s position when p is '*', compare the remaining part, if not match, s move to the next char, then match again.
class Solution {
    public boolean isMatch(String s, String p) {
        int i=0, j=0;
        int markp=-1;
        int marks=-1;
        
        while (i<s.length()) {
            if (j<p.length() && (s.charAt(i)==p.charAt(j) || p.charAt(j)=='?')) { // if match, s and p both move to next char
                i++;
                j++;
            } else if (j<p.length() && p.charAt(j)=='*') { // mark where p and s are now
                markp=j;
                marks=i;
                j++;
            } else if (markp!=-1) {  // compare the remaining part, if not match, i++.
                i=marks;
                j=markp;
                i++;
            } else {
                return false;
            }
        }
        while (j<p.length() && p.charAt(j)=='*') {   
            j++;
        }
        return j==p.length();
    }
}
