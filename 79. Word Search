Given a 2D board and a word, find if the word exists in the grid.
The word can be constructed from letters of sequentially adjacent cell, 
where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.



public class Solution {
    public boolean exist(char[][] board, String word) {
        int row = board.length;
        int col = board[0].length;
        
        // dfs for each char cell in the board
        for (int i=0; i<row; i++) {
            for (int j=0; j<col; j++) {
                if (helper(board, word, i, j, 0)) return true;
            }
        }
        return false;
    }
    public boolean helper(char[][] board, String word, int i, int j, int index) {
        int row = board.length;
        int col = board[0].length;
        
        // end the search
        if (index == word.length()) return true;
        if (i<0 || j<0 || i>=row || j>=col) return false;
        
        if (board[i][j] == word.charAt(index)) {
            char temp = board[i][j];  // record board[i][j]
            board[i][j] = '#';        // labeled as visited
            if (helper(board, word, i, j-1, index+1) ||      // search board for the next char in the word
               helper(board, word, i, j+1, index+1) ||
               helper(board, word, i-1, j, index+1) ||
               helper(board, word, i+1, j, index+1)) return true;
            board[i][j] = temp;  // recover the board for the next board[i][j]
        }
        return false;
    }
}
