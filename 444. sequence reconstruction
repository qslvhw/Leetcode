Check whether the original sequence org can be uniquely reconstructed from the sequences in seqs.The org sequence is a permutation of 
the integers from 1 to n, with 1 ≤ n ≤ 104. Reconstruction means building a shortest common supersequence of the sequences in seqs 
(i.e., a shortest sequence so that all sequences in seqs are subsequences of it). Determine whether there is only one sequence that 
can be reconstructed from seqs and it is the org sequence.

Input:
org: [1,2,3], seqs: [[1,2],[1,3]]
Output:
false

Input:
org: [1,2,3], seqs: [[1,2]]
Output:
false

Input:
org: [1,2,3], seqs: [[1,2],[1,3],[2,3]]
Output:
true

Input:
org: [4,1,5,2,6,3], seqs: [[5,2,6,3],[4,1,5,2]]
Output:
true


public class test {
	public static void main(String[] args) {
		int[] org = {4,1,5,2,6,3};
		int[][] seqs = {{5,2,6,3},{4,1,5,2}};
		System.out.println(sequenceReconstruction(org, seqs));
	}

	
	public static boolean sequenceReconstruction(int[] org, int[][] seqs) {
		int toMatch = org.length-1;    // label how many int should be determined to match
		int[] dict = new int[org.length+1];
		for (int i=0; i<org.length; i++) {
			dict[org[i]] = i;
		}
		boolean[] visited = new boolean[org.length+1];
		
		for (int[] s : seqs) {
			for (int j=0; j<s.length; j++) {
				if (s[j]<=0 || s.length>org.length) return false;
				if (j==0) continue;
				int x=s[j-1], y=s[j];
				if (dict[x]>dict[y]) return false;
				if (visited[x]==false && dict[x]+1==dict[y]) {
					visited[x]=true;      // lable the int be checked, skip it in the next sequence
					toMatch--;
				}
			}
		}
		return toMatch==0;  // all matches to return true
	}
}
