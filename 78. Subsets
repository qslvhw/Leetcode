Given a set of distinct integers, nums, return all possible subsets.
Note: The solution set must not contain duplicate subsets.

For example,
If nums = [1,2,3], a solution is:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

// add list to ans in every recursion
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        Arrays.sort(nums);
        helper(nums, ans, list, 0);
        return ans;
    }
    public void helper(int[] nums, List<List<Integer>> ans, List<Integer> list, int index) {
        ans.add(new ArrayList<>(list));
        
        for (int i=index; i<nums.length; i++) {
            list.add(nums[i]);
            helper(nums, ans, list, i+1);
            list.remove(list.size()-1);
        }
    }
}

// another solution: same as combination. only add another loop to define list.length
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        Arrays.sort(nums);
        for (int len=1; len<=nums.length; len++) {     // additional loop for list length
            helper(nums, list, ans, 0, len);
        }
        ans.add(new ArrayList<>());
        return ans;
    }
    public void helper(int[] nums, List<Integer> list, List<List<Integer>> ans, int index, int len) {
        if (list.size()==len) {
            ans.add(new ArrayList<>(list));
            return;
        }
        
        for (int i=index; i<nums.length; i++) {
            list.add(nums[i]);
            helper(nums, list, ans, i+1, len);
            list.remove(list.size()-1);
        }
    }
}
