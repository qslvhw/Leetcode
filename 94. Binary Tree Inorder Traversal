Given a binary tree, return the inorder traversal of its nodes' values.

For example: given 1,2,3,4,5. return 4,2,5,1,3
      1
     / \
    2   3
   /\
  4  5

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
// recersive solution
public class Solution {
    public List<Integer> ans = new ArrayList<>();
    public List<Integer> inorderTraversal(TreeNode root) {
        if (root==null) return ans;
        helper(root);
        return ans;
        
    }
    public void helper(TreeNode root) {
        if (root.left!=null) {
            helper(root.left);
        }
        ans.add(root.val);
        if (root.right!=null) {
            helper(root.right);
        }
    }
}

// non-recersive (using stack)
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        if (root==null) return ans;
        while (!stack.isEmpty() || root!=null) {
            if (root!=null) {
                stack.push(root);
                root = root.left;
            } else {
                root = stack.pop();
                ans.add(root.val);
                root = root.right;
            }
        }
        return ans;
    }
}
