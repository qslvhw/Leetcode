Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence 
where each word is a valid dictionary word. You may assume the dictionary does not contain duplicate words. Return all such possible sentences.

For example, given
s = "catsanddog",
dict = ["cat", "cats", "and", "sand", "dog"].
A solution is ["cats and dog", "cat sand dog"].


class Solution {
    public List<String> wordBreak(String s, List<String> wordDict) {
       // dfs without map will got ETL error
        HashMap<String, List<String>> map = new HashMap<>();
        return dfs(s, wordDict, map);
    }
    public List<String> dfs(String s, List<String> wordDict, HashMap<String, List<String>> map) {
        // when meet with the same remaining sequence, return the same string list
        if (map.containsKey(s)) {
            return map.get(s);
        }
        
        List<String> ans = new ArrayList<>();
        if (s.length()==0) {   // add "" at the end of string
            ans.add("");
            return ans;
        }
        
        for (int i=0; i<s.length(); i++) {
            String first = s.substring(0, i+1);
            if (wordDict.contains(first)) {
                List<String> list = dfs(s.substring(i+1), wordDict, map);  // dfs to search the remaining part
                for (String part : list) {
                    if (part.length()!=0) {  // check if part is the last part.
                        ans.add(first+" "+part);
                    } else {
                        ans.add(first);
                    }
                }
            }
        }
        map.put(s, ans);
        return ans;
    }
}
