Given a binary tree, flatten it to a linked list in-place.

For example,
Given

         1
        / \
       2   5
      / \   \
     3   4   6
The flattened tree should look like:
   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 // dfs solution
class Solution {
    public TreeNode prev = null;
    public void flatten(TreeNode root) {
        if (root==null) return;
        
        TreeNode temp = root.right;
        if (prev!=null) {
            prev.left = null;
            prev.right = root;
        }
        prev = root;
        flatten(root.left);
        flatten(temp);
    }
}


// iterative solution
class Solution {
    public void flatten(TreeNode root) {
        Stack<TreeNode> stack = new Stack<>();
        TreeNode node = root;
        while (!stack.isEmpty() || node!=null) {
            if (node.right!=null) {
                stack.push(node.right);
            }
            if (node.left!=null) {
                node.right = node.left;
                node.left = null;
            } else if (!stack.isEmpty()) {
                TreeNode temp = stack.pop();
                node.right = temp;
            }
            node = node.right;
        }
    }
}
