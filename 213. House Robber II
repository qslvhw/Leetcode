After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will not get too much 
attention. This time, all houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. 
Meanwhile, the security system for these houses remain the same as for those in the previous street.
Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can 
rob tonight without alerting the police.

// similar to house robber I, only devide int[] to two parts: nums[0]~nums[len-2] and nums[1]~nums[len-1]
// track max
class Solution {
    public int rob(int[] nums) {
        if (nums==null || nums.length==0) return 0;
        if (nums.length==1) return nums[0];
        return Math.max(helper(nums, 0, nums.length-2), helper(nums, 1, nums.length-1));
    }
    public int helper(int[] nums, int left, int right) {
        int even =0, odd=0;
        for (int i=left; i<=right; i++) {
            if (i%2==0) {
                even += nums[i];
                even = Math.max(even, odd);
            } else {
                odd += nums[i];
                odd = Math.max(even, odd);
            }
        }
        return Math.max(even, odd);
    }
}

//dp
class Solution {
    public int rob(int[] nums) {
        if (nums==null || nums.length==0) return 0;
        if (nums.length==1) return nums[0];
        
        return Math.max(helper(nums, 0, nums.length-2), helper(nums, 1, nums.length-1));
    }
    public int helper(int[] nums, int left, int right) {
        if (left==right) return nums[left];
        int[] dp = new int[nums.length];
        dp[left] = nums[left];
        dp[left+1] = Math.max(nums[left], nums[left+1]);
        for (int i=left+2; i<=right; i++) {
            dp[i] = Math.max(dp[i-1], dp[i-2]+nums[i]);
        }
        return dp[right];
    }
}
