Count the number of prime numbers less than a non-negative number, n.

/*     board:
 *           1   2   3   4   5   6   7   8   9   10
 *           11  12  13  14  15  16  17  18  19  20
 *           21  22  23  24  25  26  27  28  29  30
 *           31  32  33  34  35  36  37  38  39  40
 */
class Solution {
    public int countPrimes(int n) {
        boolean[] isPrime = new boolean[n];
        for (int i=2; i<n; i++) {     // label every number as true
            isPrime[i] = true;
        }
        
        for (int i=2; i*i<n; i++) {   // using i*i instead of expensive sqrt(n)
            if (isPrime[i] == false) continue;  // avoid determine a number repeatly
            for (int j=i*i; j<n; j+=i) {        // from j=i*i, label every number that contains n*i as "not a prime".
                isPrime[j] = false;             // example: i=2, j=4, then 2,4,6,8,10,... as false
            }                                   //          i=3, j=9, then 9,12,15,... as false
        }
        int cnt=0;
        for (int i=2; i<n; i++) {
            if (isPrime[i]) cnt++;  // count total prime numbers
        }
        return cnt;
    }
}
