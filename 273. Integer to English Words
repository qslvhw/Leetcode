Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than 231 - 1.

For example,
123 -> "One Hundred Twenty Three"
12345 -> "Twelve Thousand Three Hundred Forty Five"
1234567 -> "One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven"

// dfs
class Solution {
    private final String[] below10 = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"};
    private final String[] below20 = {"Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
    private final String[] below100 = {"", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
    
    public String numberToWords(int num) {
        if (num==0) return "Zero";
        return helper(num);
    }
    public String helper(int num) {
        String ans = new String();
        
        if (num<10) ans = below10[num];
        else if (num<20) ans = below20[num-10];
        else if (num<100) ans = below100[num/10] + " " + helper(num%10);
        else if (num<1000) ans = helper(num/100) + " Hundred " + helper(num%100);
        else if (num<1000000) ans = helper(num/1000) + " Thousand " + helper(num%1000);
        else if (num<1000000000) ans = helper(num/1000000) + " Million " + helper(num%1000000);
        else ans = helper(num/1000000000) + " Billion " + helper(num%1000000000);
        
        return ans.trim();
    }
}
