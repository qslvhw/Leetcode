Given a set of candidate numbers (C) (without duplicates) and a target number (T), 
find all unique combinations in C where the candidate numbers sums to T.
The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 
[
  [7],
  [2, 2, 3]
]



public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        Arrays.sort(candidates);
        helper(candidates, target, 0, ans, list);
        return ans;
    }
    public void helper(int[] candidates, int target, int index, List<List<Integer>> ans, List<Integer> list) {
        if (target==0) {
            List<Integer> s = new ArrayList<>(list);
            ans.add(s);
            return;
        }
        
        for (int i=index; i<candidates.length; i++) {
            if (target<candidates[i]) return;
            list.add(candidates[i]);
            helper(candidates, target-candidates[i], i, ans, list);
            list.remove(list.size()-1);
        }
    }
}
