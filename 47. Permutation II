/*
Given a collection of numbers that might contain duplicates, return all possible unique permutations.
For example,
[1,1,2] have the following unique permutations:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]
*/


/* recersive solution: same as 46. permutation. 
    eg: 1   1   2
       i-1  i      when nums[i]=1 as start, nums[i-1] is not visited but equals 1, skip nums[i] 
*/

public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        boolean[] visited = new boolean[nums.length];
        Arrays.sort(nums);
        helper(nums, ans, list, visited);
        return ans;
    }
    public void helper(int[] nums, List<List<Integer>> ans, List<Integer> list, boolean[] visited) {
        if (list.size() == nums.length) {
            List<Integer> s = new ArrayList<>(list);
            ans.add(s);
            return;
        }
        
        for (int i=0; i<nums.length; i++) {
            if (i>0 && nums[i]==nums[i-1] && !visited[i-1]) continue;
            if (!visited[i]) {
                list.add(nums[i]);
                visited[i]=true;
                helper(nums, ans, list, visited);
                list.remove(list.size()-1);
                visited[i]=false;
            }
        }
    }
}
