Given a digit string, return all possible letter combinations that the number could represent.
Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].


class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> ans = new ArrayList<>();
        if (digits==null || digits.length()==0) return ans;
        
        String[] s = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        
        StringBuilder list = new StringBuilder();
        helper(digits, 0, list, ans, s);
        return ans;
    }
    public void helper(String digits, int index, StringBuilder list, List<String> ans, String[] s) {
        if (index == digits.length()) {
            ans.add(list.toString());
            return;
        }
        
        String seq = s[digits.charAt(index)-'0'];
        for (int i=0; i<seq.length(); i++) {
            list.append(seq.charAt(i));
            helper(digits, index+1, list, ans, s);
            list.deleteCharAt(list.length()-1);
        }
    }
}
