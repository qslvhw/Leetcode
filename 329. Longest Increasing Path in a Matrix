Given an integer matrix, find the length of the longest increasing path.
From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the 
boundary (i.e. wrap-around is not allowed).

Example 1:
nums = [
  [9,9,4],
  [6,6,8],
  [2,1,1]
]
Return 4
The longest increasing path is [1, 2, 6, 9].

Example 2:
nums = [
  [3,4,5],
  [3,2,6],
  [2,2,1]
]
Return 4
The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.


class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if (matrix.length==0 || matrix[0].length==0 || matrix==null) return 0;
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] cache = new int[m][n];
        int max = 0;
        
        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                int len = dfs(matrix, i, j, cache, Integer.MAX_VALUE);
                max = Math.max(max, len);
            }
        }
        return max;
    }
    public int dfs(int[][] matrix, int i, int j, int[][] cache, int pre) {
        if (i<0 || i>=matrix.length || j<0 || j>=matrix[0].length || matrix[i][j]>=pre) return 0;
        if (cache[i][j]!=0) return cache[i][j];
        
        int cur = matrix[i][j];
        int temp = 0;
        temp = Math.max(temp, dfs(matrix, i-1, j, cache, cur));
        temp = Math.max(temp, dfs(matrix, i+1, j, cache, cur));
        temp = Math.max(temp, dfs(matrix, i, j-1, cache, cur));
        temp = Math.max(temp, dfs(matrix, i, j+1, cache, cur));
        cache[i][j] = ++temp;
        return temp;
    }
}

class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if (matrix.length==0 || matrix[0].length==0 || matrix==null) return 0;
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] cache = new int[m][n];
        int max = 0;
        
        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                int len = dfs(matrix, i, j, cache);
                max = Math.max(max, len);
            }
        }
        return max;
    }
    public int[] dx = {-1, 0, 0, 1};
    public int[] dy = {0, -1, 1, 0};
    public int dfs(int[][] matrix, int i, int j, int[][] cache) {
        
        if (cache[i][j]!=0) return cache[i][j];
        for (int k=0; k<4; k++) {
            int temp = 0;
            int x = i+dx[k];
            int y = j+dy[k];
            if (x>=0 && x<matrix.length && y>=0 && y<matrix[0].length && matrix[x][y]>matrix[i][j]) {
                temp = dfs(matrix, x, y, cache);
                cache[i][j] = Math.max(cache[i][j], temp);
            }
        }
        return ++cache[i][j];
    }
}
