Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.
For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \  
  5             <---
You should return [1, 3, 5].


// bfs
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if (root==null) return list;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while (!q.isEmpty()) {
            int len = q.size();
            for (int i=0; i<len; i++) {
                TreeNode n = q.poll();
                if (i==(len-1)) list.add(n.val);
                if (n.left!=null) q.add(n.left);
                if (n.right!=null) q.add(n.right);
            }
        }
        return list;
    }
}

// dfs
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if (root==null) return list;
        helper(root, list, 0);
        return list;
    }
    public void helper(TreeNode root, List<Integer> list, int depth) {
        if (root!=null) {
            if (list.size()==depth) {
                list.add(root.val);
            }
            
            helper(root.right, list, depth+1);
            helper(root.left, list, depth+1);
        }
    }
}
