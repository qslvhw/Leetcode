Design a data structure that supports all following operations in average O(1) time.

insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.


// requires O(1) time, we cannot use set, using map and ArrayList instead.

class RandomizedSet {
    HashMap<Integer, Integer> map = new HashMap<>();  // record val and its index
    ArrayList<Integer> list = new ArrayList<>();      // record val
    /** Initialize your data structure here. */
    public RandomizedSet() {  
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        if (map.containsKey(val)) {
            return false;
        } else {
            map.put(val, map.size());   // everytime put new element, map.size + 1, which represents index as well.
            list.add(val);
            return true;
        }
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        if (map.containsKey(val)) {
            int index = map.remove(val);                   // obtain position
            if (index!=list.size()-1) {
                list.set(index, list.get(list.size()-1));  // insert the last list element to index
                map.put(list.get(list.size()-1), index);   // decrease list size and make it consecutive. 
            }
            list.remove(list.size()-1);                    // delete the last element in list.
            return true;
        } else {
            return false;
        }
    }
    
    Random r = new Random();                              // Random class requires consecutive elements.
    /** Get a random element from the set. */
    public int getRandom() {
        return list.get(r.nextInt(list.size()));
    }
}

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
