Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, 
find the area of largest rectangle in the histogram.
Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].
The largest rectangle is shown in the shaded area, which has area = 10 unit.
For example,
Given heights = [2,1,5,6,2,3],
return 10.


// TLE solution.
public class Solution {
    public int largestRectangleArea(int[] heights) {
        int[] h = new int[heights.length];
        int max = 0;
        for(int i = 0; i < heights.length; i++){
            for(int j = i; j < heights.length; j++){
                if(i == j) {
                    h[j] = heights[j];
                } else {
                    if(heights[j] < h[j - 1]) {
                        h[j] = heights[j];
                    }else h[j] = h[j-1];
                }
                max = Math.max(max, h[j]*(j-i+1));
            }
        }
        return max;
    }
}

// using stack
public class Solution {
    public int largestRectangleArea(int[] height) {
        Stack<Integer> stack = new Stack<>();
        int[] h = new int[height.length+1];
        h = Arrays.copyOf(height, height.length+1);
        int i=0;
        int max = 0;
        while (i<h.length) {
        // only save increasing index in stack
            if (stack.isEmpty() || h[i] >= h[stack.peek()]) {
                stack.push(i);
                i++;
            } else {
            // when height decrease, calculate area until height is shorter than current height
                int index = stack.pop();
                int w = stack.isEmpty() ? i : i-stack.peek()-1;
                max = Math.max(max, h[index]*w);
            }
        }
        return max;
    }
}
