Given a collection of candidate numbers (C) and a target number (T), 
find all unique combinations in C where the candidate numbers sums to T.
Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, 
A solution set is: 
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]


public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        Arrays.sort(candidates);
        helper(candidates, target, 0, ans, list);
        return ans;
    }
    public void helper(int[] candidates, int target, int index, List<List<Integer>> ans, List<Integer> list) {
        if (target==0) {                    // using (target==0 && !ans.contains(list)) is not efficient.
            ans.add(new ArrayList<>(list));   
            return;
        }
       
        for (int i=index; i<candidates.length && candidates[i]<target; i++) {
            if (i>index && candidates[i]==candidates[i-1]) continue;       // skip duplicate
            list.add(candidates[i]);
            helper(candidates, target-candidates[i], i+1, ans, list);
            list.remove(list.size()-1);
        }
    }
}
