Given a collection of integers that might contain duplicates, nums, return all possible subsets.
Note: The solution set must not contain duplicate subsets.

For example,
If nums = [1,2,2], a solution is:
[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]

// add restriction: when duplicated occurs, for example, the second 2, i!=index but the value is the same, then continue to skip

public class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        
        for (int len=1; len<=nums.length; len++) {
            helper(ans, list, nums, 0, len);
        }
        ans.add(new ArrayList<>());
        return ans;
    }
    public void helper(List<List<Integer>> ans, List<Integer> list, int[] nums, int index, int len) {
        if (list.size()==len) {
            ans.add(new ArrayList<>(list));
            return;
        }
        
        for (int i=index; i<nums.length; i++) {
            if (i!=index && nums[i]==nums[i-1]) continue;
            list.add(nums[i]);
            helper(ans, list, nums, i+1, len);
            list.remove(list.size()-1);
        }
    }
}
