Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true


class Solution {
    public static boolean isMatch(String s, String p) {
        // if p is empty and s is empty return true, otherwise false.
        if (p.length()==0) return s.length()==0;
        
        /* 1. "aa -> a", ". -> a". p'len is 1. If s'len is 1: (1) if char equals, return true. (2) if q            *   equals '.', return true. Otherwise return false. 
         */ 
        if (p.length()==1) {
            return (s.length()==1 && (p.charAt(0)==s.charAt(0) || p.charAt(0)=='.'));
        }
        
        /* 2.  "aaa -> aa". The second char in p not equals to '*'. 
         *      if s is empty, then false.
         *      if the first chars are matched, then true. dfs to determine every char.
         */
        if (p.charAt(1)!='*') {
            if (s.length()==0) return false;
            else {
                return ((p.charAt(0)==s.charAt(0) || p.charAt(0)=='.') && isMatch(s.substring(1), p.substring(1)));
            }
        }
        
        /* 3. "aab -> c*a*b". The second char in p equals to '*'.
         *     if s is empty, remove first two chars in p. dfs.
         *     if s is not empty: (1) s's first char is matched with p's first char, or 
         *                        (2) first char of p is '.', dfs, return true.
         */
        else {
            while (s.length()>0 && (s.charAt(0)==p.charAt(0) || p.charAt(0)=='.')) {
                if (isMatch(s, p.substring(2))) return true;
                s = s.substring(1);
            }
            return isMatch(s, p.substring(2));
        }
    }
}

