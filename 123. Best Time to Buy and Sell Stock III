Say you have an array for which the ith element is the price of a given stock on day 
Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).


// there is a middle point i that [0,i] has max proft and [i, len] has max profit. find max profit in both left to right 
and right to left. using devide and conquer idea to get the max profit

class Solution {
    public int maxProfit(int[] prices) {
        if (prices==null || prices.length==0) return 0;
        int len = prices.length;
        
        int[] left = new int[len];
        left[0] = 0;
        int min = prices[0];
        for (int i=1; i<len; i++) {
            left[i] = Math.max(prices[i]-min, left[i-1]);
            min = Math.min(min, prices[i]);
        }
        
        int[] right = new int[len];
        right[len-1] = 0;
        int max = prices[len-1];
        for (int i=len-2; i>=0; i--) {
            right[i] = Math.max(max-prices[i], right[i+1]);
            max = Math.max(max, prices[i]);
        }
        
        int ans = 0;
        for (int i=0; i<len; i++) {
            ans = Math.max(ans, left[i]+right[i]);
        }
        return ans;
    }
}
