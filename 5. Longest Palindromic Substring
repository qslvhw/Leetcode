Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example:
Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.

Example:
Input: "cbbd"
Output: "bb"
O(n^2)
// 从s的每一个字母开始向左右两边搜palindrome，每次比较longest和temp String的长度，保留长的。
class Solution {
    public String longestPalindrome(String s) {
        String longest = "";
        for (int i=0; i<s.length(); i++) {
            String temp = helper(s, i, i);
            if (temp.length()>longest.length()) {
                longest = temp;
            }
            temp = helper(s, i, i+1);
            if (temp.length()>longest.length()) {
                longest = temp;
            }
        }
        return longest;
    }
    public String helper(String s, int i, int j) {
        while (i>=0 && j<s.length() && s.charAt(i)==s.charAt(j)) {
            i--;
            j++;
        }
        return s.substring(i+1, j);
    }
}
// 更快的方法是定义global变量，只在helper里通过string起始来比较length长度，在helper里不用得出substring， 而在结果返回substring。
class Solution {
    public int len=0, left=0;
    public String longestPalindrome(String s) {
        for (int i=0; i<s.length(); i++) {
            helper(s, i, i);
            helper(s, i, i+1);
        }
        return s.substring(left, left+len);
    }
    public void helper(String s, int i, int j) {
        while (i>=0 && j<s.length() && s.charAt(i)==s.charAt(j)) {
            i--;
            j++;
        }
        if (j-i-1>len) {
            len = j-i-1;
            left = i+1;
        }
    }
}
