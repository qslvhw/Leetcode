Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.

OJ's undirected graph serialization:
Nodes are labeled uniquely.
We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.
First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/


/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
 
 // BFS: explain inline
public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        if (node==null) return null;
        Map<UndirectedGraphNode, UndirectedGraphNode> map = new HashMap<>();  // mapping each node and it's neighbors
        Queue<UndirectedGraphNode> q = new LinkedList<>();                    // save neighbor set for each node
        UndirectedGraphNode head = new UndirectedGraphNode(node.label);       // keep original node
        q.add(node);                                                          // add the first node's neighbors
        map.put(node, head);                            // add the first node set, and the node value (node neighbor is empty right now)
        
        while (!q.isEmpty()) {
            UndirectedGraphNode cur = q.poll();               // manipulate for each node
            for (UndirectedGraphNode n : cur.neighbors) {     // find cur's neighbor set
                if (!map.containsKey(n)) {          // if map does not have n, n should be a new node, and give it an empty neighbor list
                    q.add(n);                                // add n itself as the first neighbor
                    UndirectedGraphNode newneighbor = new UndirectedGraphNode(n.label);    // create empty neighbor set
                    map.put(n, newneighbor);                 // map new node n and it's neighbor set
                }
                map.get(cur).neighbors.add(map.get(n));   // if map contains n, illustrating n is one of neighbors of cur, 
            }                                             // then get cur's neighbor set and add n.
        }
        return head;
    }
}
