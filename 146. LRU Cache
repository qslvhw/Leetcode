Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

Follow up:
Could you do both operations in O(1) time complexity?

Example:
LRUCache cache = new LRUCache( 2 /* capacity */ );
cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4

// discuss every condition based on priority of the most recent used task.
/* define Node class which has: node.pre, node.next, node.value, node.key
 * cache.get(key): 
 *    if map contains key, get node from map.get(key), remove key, set key as head, return node.value. (set priority for the most recent used)
 *    if map does not contain key, return -1.
 *
 * cache.put(key, value):
 *    if map contains key, get old node from map.get(key), set old value = value. 
 *                         remove old node, and set old node with new value as head. (set priority)
 *    if not, create newnode(key, value), determine if the map size exceed capacity, then put key and value in map:
 *              if larger than capacity, remove end.key from map, then remove end, set newnode as head
 *              if not, set newnode as head 
 */ 

class Node {
    int key;
    int value;
    Node pre;
    Node next;
    public Node(int key, int value) {
        this.key = key;
        this.value = value;
    }
}
class LRUCache {
    HashMap<Integer, Node> map = new HashMap<>();
    int capacity;
    Node head;
    Node end;
    public LRUCache(int capacity) {
       this.capacity = capacity;
    }
    
    public int get(int key) {
        if (map.containsKey(key)) {
            Node n = map.get(key);
            removeNode(n);
            setHead(n);
            return n.value;
        }
        return -1;
    }
    public void removeNode(Node n) {
        if (n.pre!=null) {
            n.pre.next = n.next;
        } else {
            head = n.next;
        }
        
        if (n.next!=null) {
            n.next.pre = n.pre;
        } else {
            end = n.pre;
        }
    }
    public void setHead(Node n) {
        n.next = head;
        n.pre = null;
        if (head!=null) {
            head.pre = n;
        }
        head = n;
        if (end==null) {
            end = head;
        }
    }
    
    public void put(int key, int value) {
        if (map.containsKey(key)) {
            Node old = map.get(key);
            old.value = value;
            removeNode(old);
            setHead(old);
        } else {
            Node created = new Node(key, value);
            if (map.size()>=capacity) {
                map.remove(end.key);
                removeNode(end);
                setHead(created);
            } else {
                setHead(created);
            }
            map.put(key, created);
        }
    }
}

/**
}
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
